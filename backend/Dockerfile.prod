###########
# BUILDER #
###########

# pull official base image
FROM python:3.8.2-alpine as builder

# Set enviroment variables - Prevents Python from writing pyc files to disc
ENV PYTHONDONTWRITEBYTECODE 1

# Prevents Python from buffering stdout and stderr
ENV PYTHONUNBUFFERED 1

# Set the working directory
WORKDIR /usr/src/app

# upgrade pip
RUN pip install --no-cache-dir --upgrade pip

# install psycopg2 & pillow dependencies
RUN apk update \
    && apk add gcc python3-dev musl-dev postgresql-dev \
    && apk add jpeg-dev zlib-dev libjpeg

COPY ./requirements.txt .
RUN pip wheel --no-cache-dir --no-deps --wheel-dir /usr/src/app/wheels -r requirements.txt

#########
# FINAL #
#########

# pull official base image
FROM python:3.8.2-alpine

# Set the working directory
ENV BASE_DIR=/usr/src/app
ENV APP_DIR=$BASE_DIR/backend
RUN mkdir -p $APP_DIR
WORKDIR $APP_DIR

# Set assets directory
ENV ASSETS_DIR=$BASE_DIR/assets
RUN mkdir -p $ASSETS_DIR
RUN mkdir $ASSETS_DIR/staticfiles
RUN mkdir $ASSETS_DIR/mediafiles

# upgrade pip
RUN pip install --no-cache-dir --upgrade pip

# install psycopg2 & pillow dependencies
RUN apk update \
    && apk add libpq jpeg-dev zlib-dev libjpeg postgresql-client

COPY --from=builder /usr/src/app/wheels /wheels
COPY --from=builder /usr/src/app/requirements.txt .
RUN pip install --no-cache /wheels/*

# after installation, remove wheels
RUN rm -rf /wheels

# Copies everything over to Docker environment
COPY . .

# run entrypoint.sh
ENTRYPOINT ["/usr/src/app/backend/entrypoint.prod.sh"]
